{"version":3,"sources":["components/quiz/questions-panel/Answer.jsx","components/quiz/questions-panel/Question.jsx","components/quiz/questions-panel/QuestionsPanel.jsx","components/quiz/Queries.js","utils/LocalStorageUtils.js","components/quiz/results-panel/ResultsTable.jsx","components/quiz/results-panel/ResultForm.jsx","components/quiz/results-panel/ResultsPanel.jsx","components/quiz/QuestionTypes.js","components/quiz/QuestionFactory.js","components/quiz/Quiz.jsx","components/App.jsx","utils/ApolloClientFactory.js","index.js"],"names":["Answer","answer","onClickAnswer","className","onClick","correct","text","Question","question","answers","map","v4","QuestionsPanel","questions","score","setScore","onQuestionsDone","useState","questionIndex","setQuestionIndex","length","COUNTRIES","gql","getArray","key","localStorage","getItem","JSON","parse","ResultsTable","results","scope","sort","a","b","result","i","name","ResultForm","onSubmit","disabled","valid","rest","inputRef","useRef","useEffect","current","focus","placeholder","ref","id","ResultsPanel","onPlayAgain","validInput","setValidInput","disabledInput","setDisabledInput","process","e","preventDefault","target","value","arrayKey","items","setItem","stringify","pushItems","questionTypes","getQuestion","country","getAnswer","phone","continent","capital","currency","languages","createAnswer","questionType","createIncorrectAnswers","countries","correctCountry","sample","find","push","createQuestions","shuffle","slice","min","createQuestion","Quiz","useQuery","loading","error","data","showResults","setShowResults","message","App","ApolloProvider","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3f885f4.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Answer = ({ answer, onClickAnswer }) =>\r\n  <button className=\"col btn btn-success p-1 m-3\" onClick={() => onClickAnswer(answer.correct)}>\r\n    {answer.text}\r\n  </button>\r\n\r\nAnswer.propTypes = {\r\n  answer: PropTypes.shape({ text: PropTypes.string, correct: PropTypes.bool }).isRequired,\r\n  onClickAnswer: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Answer\r\n","import React from 'react'\r\nimport Answer from './Answer'\r\nimport PropTypes from 'prop-types'\r\nimport { v4 } from 'uuid'\r\n\r\nconst Question = ({ question, onClickAnswer }) =>\r\n  <div className=\"container p-3 my-3 bg-dark text-white\">\r\n    <div className=\"row\">\r\n      <span className=\"text-center\">{question.text}</span>\r\n    </div>\r\n    <div className=\"row\">\r\n      {question.answers.map(answer => <Answer key={v4()} answer={answer} onClickAnswer={onClickAnswer} />)}\r\n    </div>\r\n  </div>\r\n\r\nQuestion.propTypes = {\r\n  question: PropTypes.shape({ text: PropTypes.string, answers: PropTypes.array }).isRequired,\r\n  onClickAnswer: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Question\r\n","import React, { useState } from 'react'\r\nimport Question from './Question'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst QuestionsPanel = ({ questions, score, setScore, onQuestionsDone }) => {\r\n  const [questionIndex, setQuestionIndex] = useState(0)\r\n\r\n  const onClickAnswer = correct => {\r\n    if (correct) {\r\n      setScore(score + 1)\r\n    }\r\n    setQuestionIndex(questionIndex + 1)\r\n    if (questionIndex + 1 === questions.length) {\r\n      onQuestionsDone()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container p-1 my-3 text-white text-center\">\r\n      <h1 className=\"mb-3\">Countries Quiz!</h1>\r\n      <h3>Question {questionIndex + 1} / {questions.length}</h3>\r\n      {questions.length > questionIndex && <Question question={questions[questionIndex]} onClickAnswer={onClickAnswer} />}\r\n    </div>\r\n  )\r\n}\r\n\r\nQuestionsPanel.propTypes = {\r\n  questions: PropTypes.array.isRequired,\r\n  score: PropTypes.number.isRequired,\r\n  setScore: PropTypes.func.isRequired,\r\n  onQuestionsDone: PropTypes.func.isRequired\r\n}\r\n\r\nexport default QuestionsPanel\r\n","import gql from 'graphql-tag'\r\n\r\nexport const COUNTRIES = gql`\r\n    query countries {\r\n        countries {\r\n            name\r\n            phone\r\n            capital\r\n            currency\r\n            continent {\r\n                name\r\n            }\r\n            languages {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n","export const pushItems = (arrayKey, ...items) => localStorage.setItem(arrayKey, JSON.stringify([...getArray(arrayKey), ...items]))\r\n\r\nexport const getArray = key => localStorage.getItem(key) ? JSON.parse(localStorage.getItem(key)) : []\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { v4 } from 'uuid'\r\n\r\nconst ResultsTable = ({ results }) => (\r\n  <table className=\"table table-striped table-bordered table-dark\">\r\n    <thead>\r\n    <tr>\r\n      <th scope=\"col\">Rank</th>\r\n      <th scope=\"col\">Name</th>\r\n      <th scope=\"col\">Score</th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n    {\r\n      results.sort((a, b) => b.score - a.score).map((result, i) =>\r\n        <tr key={v4()}>\r\n          <td>{i + 1}</td>\r\n          <td>{result.name}</td>\r\n          <td>{result.score}</td>\r\n        </tr>\r\n      )\r\n    }\r\n    </tbody>\r\n  </table>\r\n)\r\n\r\nResultsTable.propTypes = {\r\n  results: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default ResultsTable\r\n","import React, { useEffect, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ResultForm = ({ onSubmit, disabled, valid, ...rest }) => {\r\n  const inputRef = useRef(null)\r\n\r\n  useEffect(() => inputRef.current.focus(), [])\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} {...rest}>\r\n      <div className=\"row\">\r\n        <input\r\n          className={'col form-control' + (valid ? '' : ' is-invalid')}\r\n          disabled={disabled}\r\n          placeholder=\"Input your name!\"\r\n          ref={inputRef}\r\n        />\r\n        <button id=\"result-form-input-btn\" className=\"col-2 mx-2 p-1 btn btn-success\" disabled={disabled}>Enter</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nResultForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n  disabled: PropTypes.bool.isRequired,\r\n  valid: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default ResultForm\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { getArray, pushItems } from '../../../utils/LocalStorageUtils'\r\nimport ResultsTable from './ResultsTable'\r\nimport ResultForm from './ResultForm'\r\n\r\nconst ResultsPanel = ({ score, onPlayAgain }) => {\r\n  const [validInput, setValidInput] = useState(true)\r\n  const [disabledInput, setDisabledInput] = useState(false)\r\n  const results = getArray(process.env.REACT_APP_LOCAL_STORAGE_RESULTS_KEY)\r\n\r\n  const onSubmitResult = e => {\r\n    e.preventDefault()\r\n    if (!e.target[0].value) {\r\n      setValidInput(false)\r\n      return\r\n    }\r\n    setValidInput(true)\r\n    setDisabledInput(true)\r\n    pushItems(process.env.REACT_APP_LOCAL_STORAGE_RESULTS_KEY, { name: e.target[0].value, score: score })\r\n  }\r\n\r\n  return (\r\n    <div className=\"container p-2 my-3 text-white\">\r\n      <div className=\"row mx-1\">\r\n        <ResultForm className=\"col-md\" onSubmit={onSubmitResult} valid={validInput} disabled={disabledInput} />\r\n        <div className=\"col-md-2 d-flex align-items-center justify-content-center\">\r\n          <span>Your score: <b>{score}</b></span>\r\n        </div>\r\n        <button className=\"col-md-2 btn btn-success\" onClick={onPlayAgain} disabled={!disabledInput}>\r\n          Play again!\r\n        </button>\r\n      </div>\r\n      <div className=\"row mt-3 mx-1\">\r\n        {results.length > 0 && <ResultsTable results={results} />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nResultsPanel.propTypes = {\r\n  score: PropTypes.number.isRequired,\r\n  onPlayAgain: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ResultsPanel\r\n","const questionTypes = [\r\n  {\r\n    getQuestion(country) {\r\n      return `What is the phone code for ${country.name}?`\r\n    },\r\n    getAnswer(country) {\r\n      return country.phone\r\n    }\r\n  },\r\n  {\r\n    getQuestion(country) {\r\n      return `On which continent is the country ${country.name}?`\r\n    },\r\n    getAnswer(country) {\r\n      return country.continent.name\r\n    }\r\n  },\r\n  {\r\n    getQuestion(country) {\r\n      return `What is the capital of ${country.name}?`\r\n    },\r\n    getAnswer(country) {\r\n      return country.capital ? country.capital : 'No official capital'\r\n    }\r\n  },\r\n  {\r\n    getQuestion(country) {\r\n      return `What is the currency in ${country.name}?`\r\n    },\r\n    getAnswer(country) {\r\n      return country.currency ? country.currency : 'No official currency'\r\n    }\r\n  }\r\n  ,\r\n  {\r\n    getQuestion(country) {\r\n      return `What is one language ${country.name} speaks?`\r\n    },\r\n    getAnswer(country) {\r\n      return country.languages && country.languages.length > 0 ? country.languages[0].name : 'No official language'\r\n    }\r\n  }\r\n]\r\n\r\nexport default questionTypes\r\n","import { min, sample, shuffle } from 'lodash'\r\nimport questionTypes from './QuestionTypes'\r\n\r\nconst createAnswer = (country, questionType, correct) => ({ text: questionType.getAnswer(country), correct })\r\n\r\nconst createIncorrectAnswers = (countries, correctCountry, questionType) => {\r\n  const answers = []\r\n  while (answers.length < process.env.REACT_APP_MAX_ANSWERS - 1) {\r\n    const answer = createAnswer(sample(countries), questionType, false)\r\n    if (answer.text !== questionType.getAnswer(correctCountry) && !answers.find(a => a.text === answer.text)) {\r\n      answers.push(answer)\r\n    }\r\n  }\r\n  return answers\r\n}\r\n\r\nconst createQuestion = (countries, correctCountry, questionType) => ({\r\n  text: questionType.getQuestion(correctCountry),\r\n  answers: shuffle([\r\n    createAnswer(correctCountry, questionType, true), ...createIncorrectAnswers(countries, correctCountry, questionType)\r\n  ])\r\n})\r\n\r\nexport const createQuestions = countries => shuffle(countries)\r\n  .slice(0, min([process.env.REACT_APP_MAX_QUESTIONS, countries.length]))\r\n  .map(country => createQuestion(countries, country, sample(questionTypes)))\r\n","import React, { useState } from 'react'\r\nimport QuestionsPanel from './questions-panel/QuestionsPanel'\r\nimport { useQuery } from '@apollo/client'\r\nimport { COUNTRIES } from './Queries'\r\nimport ResultsPanel from './results-panel/ResultsPanel'\r\nimport { createQuestions } from './QuestionFactory'\r\n\r\nconst Quiz = () => {\r\n  const { loading, error, data } = useQuery(COUNTRIES)\r\n  const [score, setScore] = useState(0)\r\n  const [showResults, setShowResults] = useState(false)\r\n\r\n  const onPlayAgain = () => {\r\n    setScore(0)\r\n    setShowResults(false)\r\n  }\r\n\r\n  if (loading) {\r\n    return <div className=\"my-3 text-white\">Loading...</div>\r\n  } else if (error) {\r\n    return <div className=\"my-3 text-white\">Error! ${error.message}</div>\r\n  }\r\n  return (\r\n    <>\r\n      {!showResults &&\r\n      <QuestionsPanel\r\n        questions={createQuestions(data.countries)}\r\n        score={score}\r\n        setScore={setScore}\r\n        onQuestionsDone={() => setShowResults(true)}\r\n      />\r\n      }\r\n      {showResults && <ResultsPanel score={score} onPlayAgain={onPlayAgain} />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Quiz\r\n","import React from 'react'\r\nimport { ApolloProvider } from '@apollo/client'\r\nimport '../styles/App.scss'\r\nimport Quiz from './quiz/Quiz'\r\nimport { createCountriesClient } from '../utils/ApolloClientFactory'\r\nimport { Helmet, HelmetProvider } from 'react-helmet-async'\r\n\r\nconst App = () => (\r\n  <HelmetProvider>\r\n    <Helmet>\r\n      <body className=\"bg-secondary\" />\r\n    </Helmet>\r\n    <ApolloProvider client={createCountriesClient()}>\r\n      <Quiz />\r\n    </ApolloProvider>\r\n  </HelmetProvider>\r\n)\r\n\r\nexport default App\r\n","import { ApolloClient, InMemoryCache } from '@apollo/client'\r\n\r\nexport const createCountriesClient = () => new ApolloClient({\r\n  uri: process.env.REACT_APP_COUNTRIES_GRAPHQL_URI,\r\n  cache: new InMemoryCache()\r\n})\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './components/App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}